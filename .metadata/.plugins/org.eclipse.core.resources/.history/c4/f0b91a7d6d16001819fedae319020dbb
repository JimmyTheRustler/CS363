import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
 
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
 
public class DHAES {
 
    private static SecretKeySpec secretKey;
    private static byte[] key;
    
    public static void main(String[] args){
    	BigInteger bigA = new BigInteger("455999968826556232865376360741");
    	int smallB = 1337;
    	BigInteger bigB = new BigInteger("0");
    	bigB = smallBToBigB(bigA, smallB);
    	System.out.println(bigB);
    }
    
    public static BigInteger smallBToBigB( BigInteger bigA, int smallB ){
    	BigInteger ans = new BigInteger("0");
    	BigInteger q = new BigInteger("53312796669816512924567214991");
    	BigInteger p = new BigInteger("21419622856657689423872613771");
    	BigInteger qb = new BigInteger("0");
    	
    	qb = q.pow(smallB);
    	ans = qb.mod(p);
    	
    	//Math.pow(q,smallB)
    	return ans;
    }
    
    public static void setKey(String myKey)
    {
        MessageDigest sha = null;
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, "AES");
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public static byte[] encrypt(byte[] strToEncrypt, String secret)
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return cipher.doFinal(strToEncrypt);
        }
        catch (Exception e)
        {
            System.out.println("Error while encrypting bytes: " + e.toString());
        }
        return null;
    }

 
    public static byte[] decrypt(byte[] strToDecrypt, String secret)
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return cipher.doFinal(strToDecrypt);
        }
        catch (Exception e)
        {
            System.out.println("Error while decrypting bytes: " + e.toString());
        }
        return null;
    }
 
}